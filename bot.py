from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import TelegramAPIError
import logging
import os

API_TOKEN = '8063346130:AAGcwNNQXzNZjaE3Nes4eKmiQr2FRAvdgc4'
ADMIN_ID = 6449574815
CARD_PATH = 'cards'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    subjects = State()
    months = State()
    waiting_for_receipt = State()

subjects_data = {
    '–•–∏–º–∏—è': 'chemistry.jpg',
    '–§–∏–∑–∏–∫–∞': 'physics.jpg',
    '–ë–∏–æ–ª–æ–≥–∏—è': 'biology.jpg',
    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'math.jpg'
}

subjects_emojis = {
    '–•–∏–º–∏—è': 'üî¨',
    '–§–∏–∑–∏–∫–∞': '‚öõÔ∏è',
    '–ë–∏–æ–ª–æ–≥–∏—è': 'üß¨',
    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': '‚ûó'
}

@dp.message_handler(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.update_data(subjects=[], months=1)
    await state.set_state(Form.subjects.state)

    image = InputFile(os.path.join(CARD_PATH, 'combined.jpg'))
    keyboard = InlineKeyboardMarkup(row_width=2)
    for subject in subjects_data:
        emoji = subjects_emojis[subject]
        keyboard.insert(InlineKeyboardButton(f"{emoji} {subject}", callback_data=f"choose_{subject}"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue"))

    await message.answer_photo(photo=image, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('choose_'), state=Form.subjects)
async def choose_subject(callback_query: types.CallbackQuery, state: FSMContext):
    subject = callback_query.data.split('_')[1]
    data = await state.get_data()
    subjects = data.get("subjects", [])
    if subject not in subjects:
        subjects.append(subject)
        await state.update_data(subjects=subjects)
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {subject}")

@dp.callback_query_handler(lambda c: c.data == 'continue', state=Form.subjects)
async def process_continue(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    subjects = data.get("subjects", [])
    if not subjects:
        await callback_query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", show_alert=True)
        return
    await Form.next()
    await callback_query.message.delete()
    months_keyboard = InlineKeyboardMarkup(row_width=4)
    for i in range(1, 13):
        months_keyboard.insert(InlineKeyboardButton(str(i), callback_data=f"months_{i}"))
    await bot.send_message(callback_query.from_user.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å?", reply_markup=months_keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('months_'), state=Form.months)
async def process_months(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    months = int(callback_query.data.split('_')[1])
    data = await state.get_data()
    subjects = data.get("subjects", [])
    await state.update_data(months=months)

    price_per_subject = 250
    total = price_per_subject * len(subjects) * months

    if 3 <= months <= 5:
        discount = 0.05
    elif 6 <= months <= 11:
        discount = 0.08
    elif months == 12:
        discount = 0.10
    else:
        discount = 0.0

    discounted_total = int(total * (1 - discount))

    text = (
        f"–ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(subjects)}\n"
        f"–ú–µ—Å—è—Ü–µ–≤: {months}\n"
        f"–¶–µ–Ω–∞ –¥–æ —Å–∫–∏–¥–∫–∏: {total} —Å–æ–º–æ–Ω–∏\n"
        f"–°–∫–∏–¥–∫–∞: {int(discount * 100)}%\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {discounted_total} —Å–æ–º–æ–Ω–∏\n\n"
        f"üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"–ö–∞—Ä—Ç–∞: 992558010200\n"
        f"–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –ö—É—Ä–±–æ–Ω–∑–æ–¥–∞ –ú.–ú\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫."
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
    )
    await callback_query.message.delete()
    await bot.send_message(user_id, text, reply_markup=keyboard)
    await Form.waiting_for_receipt.set()

@dp.callback_query_handler(lambda c: c.data == 'paid', state=Form.waiting_for_receipt)
async def ask_receipt(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.waiting_for_receipt)
async def handle_receipt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    subjects = data.get("subjects", [])
    months = data.get("months", 1)

    photo = message.photo[-1]
    caption = (
        f"üì• –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(subjects)}\n"
        f"–ú–µ—Å—è—Ü–µ–≤: {months}"
    )
    await bot.send_photo(chat_id=ADMIN_ID, photo=photo.file_id, caption=caption)

    final_msg = (
        "‚úÖ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!\n\n"
        "–í–∞—à –ø–ª–∞—Ç—ë–∂ —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑-–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏.\n"
        "–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å –≤–∞–º–∏ –Ω–µ —Å–≤—è–∑–∞–ª–∏—Å—å,\n"
        "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
        "üì© Telegram: @Duolingocoin\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +992 98 444 74 00"
    )

    menu_keyboard = InlineKeyboardMarkup(row_width=2)
    menu_keyboard.add(
        InlineKeyboardButton("üîÅ –í –Ω–∞—á–∞–ª–æ", callback_data="main_menu"),
        InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/Duolingocoin")
    )

    await message.answer(final_msg, parse_mode="Markdown", reply_markup=menu_keyboard)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def return_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await start(callback_query.message, state)

@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.")

@dp.errors_handler()
async def global_error_handler(update, exception):
    try:
        await bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞!\n\n–¢–∏–ø: {type(exception).__name__}\n–¢–µ–∫—Å—Ç: {exception}"
        )
    except TelegramAPIError:
        pass
    return True

if __name__ == '__main__':
    async def on_startup(dp):
        await bot.send_message(ADMIN_ID, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    
